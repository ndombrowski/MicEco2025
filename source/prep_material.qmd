---
engine: knitr
eval: false
---

# Prep course material

## List of nanopore adaptors

For this tutorial I want to test fastplong as alternative to porechop followed by chopper. While fastplong should allow for automatic detection of adapters I also want to try and test it by providing a list of all possible adapter sequences.

```{bash}
cd /zfs/omics/projects/bioinformatics/scripts

# Get the porechop adapter script to get an input file for fastplong 
wget https://raw.githubusercontent.com/rrwick/Porechop/refs/heads/master/porechop/adapters.py

# Write script to extract all barcodes but output a fasta file of the full adapters
mkdir ../files/nanopore 
python parse_adapters.py
```

This script produces two files 

- full_adapters.fasta (full adapters including all native and rapid barcodes)
- barcode_only_adapters.fasta (just barcode sequences)


## Test fastplong 

### Installation

```{bash}
mamba create -p /zfs/omics/projects/bioinformatics/software/miniconda3/envs/fastplong_0.4.1 -c bioconda fastplong=0.4.1
```


### Default settings

```{bash}
mamba activate fastplong_0.4.1

mkdir -p results/fastplong/v1

srun --mem=20G --cpus-per-task 2 fastplong \
    -i data/barcode01_merged.fastq.gz \
    --mean_qual 8 \
    -l 1400 --length_limit 1700 \
    --thread 2 \
    -o results/fastplong/v1/barcode01_filtered.fastq.gz
```

Defaults:

-   -A, --disable_adapter_trimming     adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled. If all these adapter options (start_adapter, end_adapter and adapter_fasta) are not specified, fastplong will try to detect the read start and read end adapters automatically. The detected adapter sequences may be a bit shorter or longer than the real ones. And there is a certain probability of misidentification, especially when most reads don't have adapters (it won't cause too bad result in this case).
-   -Q, --disable_quality_filtering    quality filtering is enabled by default. If this option is specified, quality filtering is disabled
-   -q, --qualified_quality_phred      the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified. (int [=15])
-   -W, --cut_window_size              the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4])
-   -M, --cut_mean_quality             the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20])
-   -d, --distance_threshold           threshold of sequence-adapter-distance/adapter-length (0.0 ~ 1.0), greater value means more adapters detected (double [=0.25])
-  --trimming_extension           when an adapter is detected, extend the trimming to make cleaner trimming, default 10 means trimming 10 bases more (int [=10])

Others:

-   -f, --trim_front                   trimming how many bases in front for read, default is 0 (int [=0])
-   -5, --cut_front                    move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.
-   -3, --cut_tail                     move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.
-   -m, --mean_qual                    if one read's mean_qual quality score < mean_qual, then this read is discarded. Default 0 means no requirement (int [=0])


Results (1 seconds):

```
Trying to detect adapter sequence at read start
Detected: GCCTACCGTGAC{AAGAAAGTTGTCGGTGTCTTTGTG}  {barcode1_start_sequence}
Trying to detect adapter sequence at read end   
Detected: {CACAAAGACACCGACAACTTTCTT}GTC            {barcode1_end_sequence}    

Before filtering:
total reads: 17121
total bases: 24089162
Q20 bases: 13250840(55.0075%)
Q30 bases: 4013925(16.6628%)

After filtering:
total reads: 8441
total bases: 12359581
Q20 bases: 7827054(63.3278%)
Q30 bases: 2512370(20.3273%)

Filtering result:
reads passed filter: 8441
reads failed due to low quality: 4136
reads failed due to too many N: 0
reads failed due to too short: 4569
reads failed due to too long: 15
reads with adapter trimmed: 16548
bases trimmed due to adapters: 1808399

JSON report: fastplong.json
HTML report: fastplong.html
```


Before:
@a72b920c-8266-4865-84a9-50690efe5943 runid=b1ae45334215a9c23ceb122ef2b45224cee1eeab read=26381 ch=122 start_time=2022-03-10T20:32:29Z flow_cell_id=AHJ236 protocol_group_id=matteo2 sample_id=mt2 barcode=barcode01 barcode_alias=barcode01
TTGTACTTCGTTCAGTTCGGGCATTGGGTGTTGCTCAGTTC[ATCGCCTACCGTGAC]{AAGAAAGTTGTCGGTGTCTTTGTG}AGAGTTTGAT|start_trimming|CATGGCTCAGGATGAACGCTGGCGGCGTACCTAACACATGCAAGTCGAACGGGTACCTTTGACAGAGATTTCGGTCAATTGATAAGGATACTTAGTGGCGGACGGGTGAGGTAACGCGTGAGCAATCTGCCTTTCAGTGGGGGAATAACAGTCGGAAACGATTGCTAATACCGCATAATGTATCGGGATCGCATGGTTCTGATACCAAAGATTTATCGCTGAAAGATGAGCTCGCGTCTGATTAGCTAGTTGGTAAGGTAATGGCTTGCAAAGCGACGATCAGTAGCCGGACTGAAGGAGTTGAACGGCCACATTGGGACTGAGACACGGCCCAGACTCCTACAGGAGGCAGCAGTGGGAATATTGGGCAATGGGCATAAGCCTGACCCAGCAACGCCGCGTGAAGGAAAAGGCTTTCGGGTTGTAAACTTCTTTTATCAGGGACGAAAAAAATGACGGTACCTGAAGAATAAGCCACGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGTGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGCGTGTAGGCGGGACTGCAAGTCAGATGTGAAATCTATGGGCTCAACCCATAGCGTGCATTTGAAACTGTAGTTCTTGAGTGATGGAGAGGCAAACGGAATTCCGTGTGTAGCGGTGAAATGCGTAGATATACGGAGGAACACCAGTGGCGAAGGCGGTTTGCTGGACATTAACTGACGCTGAGGCGCGAAAGCGTGGGGAGCAAACAGAGTTAGATACCCTGGTAATTTTTGCTGTAAACGATGGATACTAGGTGTGGGGGGACTGACCCCTTCCGTGCCGCAGTTAACACAATAAGTATCCCACCTGGGGAGTACGATCGCAAGGTCGAAACTCAAAGGAATTGACGGGGGCCCGCACAAGCGGTGGGTATGTGGATTAATTCGAAGCAACGCGAAGAACCTTACCAGGACTTGACATCCTATAACGAAGTAGAGATACATTAGGTGCCCTTCGGGGAAAGTAGAACAGGTGGTGCATGGTTGTCGTCAGCTCGTGTCGTGAGATGTTAGGTTAGAATTCTATGAGCTGCTTATATTAGTTGCTACGCAAGAGCACTCTAGCGAGATACCGTTGATAAAACAGGAGGAAGATTGGGGACGACGTCAAATCATCATGCCTCTTATGTCCTGGGCCTCACGTACTACAATGGCGATTAACAGAGGGAAGCAAGACCGCGAGGTGGAGCAAATCCTAAATCGTCTCAGTTCAGATTGCAGGCTGAAACCCGCCTGTATGAAGTCGGAATCGCTAGTAATCGCGGATCCAGCATGCCGCGGTGAATACGTTCGGGCCTTGTACACACCGCCCGTCACACCACGAGAGTCAGGAACACCGAAGTCCGTAGCTTAACCGCAAGGAGCGCGGCCGAAGGTGGGTTTGATAATTGGGGGTGAAGTCGTAAC|end trimming|AAGGTAACCG{CACAAAGACACCGACAACTTTCTT}G


After:
@a72b920c-8266-4865-84a9-50690efe5943 runid=b1ae45334215a9c23ceb122ef2b45224cee1eeab read=26381 ch=122 start_time=2022-03-10T20:32:29Z flow_cell_id=AHJ236 protocol_group_id=matteo2 sample_id=mt2 barcode=barcode01 barcode_alias=barcode01
CATGGCTCAGGATGAACGCTGGCGGCGTACCTAACACATGCAAGTCGAACGGGTACCTTTGACAGAGATTTCGGTCAATTGATAAGGATACTTAGTGGCGGACGGGTGAGGTAACGCGTGAGCAATCTGCCTTTCAGTGGGGGAATAACAGTCGGAAACGATTGCTAATACCGCATAATGTATCGGGATCGCATGGTTCTGATACCAAAGATTTATCGCTGAAAGATGAGCTCGCGTCTGATTAGCTAGTTGGTAAGGTAATGGCTTGCAAAGCGACGATCAGTAGCCGGACTGAAGGAGTTGAACGGCCACATTGGGACTGAGACACGGCCCAGACTCCTACAGGAGGCAGCAGTGGGAATATTGGGCAATGGGCATAAGCCTGACCCAGCAACGCCGCGTGAAGGAAAAGGCTTTCGGGTTGTAAACTTCTTTTATCAGGGACGAAAAAAATGACGGTACCTGAAGAATAAGCCACGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGTGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGCGTGTAGGCGGGACTGCAAGTCAGATGTGAAATCTATGGGCTCAACCCATAGCGTGCATTTGAAACTGTAGTTCTTGAGTGATGGAGAGGCAAACGGAATTCCGTGTGTAGCGGTGAAATGCGTAGATATACGGAGGAACACCAGTGGCGAAGGCGGTTTGCTGGACATTAACTGACGCTGAGGCGCGAAAGCGTGGGGAGCAAACAGAGTTAGATACCCTGGTAATTTTTGCTGTAAACGATGGATACTAGGTGTGGGGGGACTGACCCCTTCCGTGCCGCAGTTAACACAATAAGTATCCCACCTGGGGAGTACGATCGCAAGGTCGAAACTCAAAGGAATTGACGGGGGCCCGCACAAGCGGTGGGTATGTGGATTAATTCGAAGCAACGCGAAGAACCTTACCAGGACTTGACATCCTATAACGAAGTAGAGATACATTAGGTGCCCTTCGGGGAAAGTAGAACAGGTGGTGCATGGTTGTCGTCAGCTCGTGTCGTGAGATGTTAGGTTAGAATTCTATGAGCTGCTTATATTAGTTGCTACGCAAGAGCACTCTAGCGAGATACCGTTGATAAAACAGGAGGAAGATTGGGGACGACGTCAAATCATCATGCCTCTTATGTCCTGGGCCTCACGTACTACAATGGCGATTAACAGAGGGAAGCAAGACCGCGAGGTGGAGCAAATCCTAAATCGTCTCAGTTCAGATTGCAGGCTGAAACCCGCCTGTATGAAGTCGGAATCGCTAGTAATCGCGGATCCAGCATGCCGCGGTGAATACGTTCGGGCCTTGTACACACCGCCCGTCACACCACGAGAGTCAGGAACACCGAAGTCCGTAGCTTAACCGCAAGGAGCGCGGCCGAAGGTGGGTTTGATAATTGGGGGTGAAGTCGTAAC

[Barcode design](https://nanoporetech.com/document/data-analysis#barcoding-options)

The Oxford Nanopore Technologies barcoding kits can place barcodes at the beginning and for some kits, also at the end of the strands for multiplexing several different samples in one sequencing experiment. The barcodes will reside in a kit-specific context sequence, and different kits will have different lengths of sequence before and after the barcode. However, the sequences of the barcodes themselves are identical, regardless of kit.

A complete barcode arrangement comprises three sections:

    - The upstream flanking region, which comes between the barcode and the sequencing adapter.
    - The barcode sequence.
    - The downstream flanking region, which comes between the barcode and the sample sequence.


### Using a adapter file 

```{bash}
mkdir results/fastplong/v2 

srun --mem=20G --cpus-per-task 10 fastplong \
    -i data/barcode01_merged.fastq.gz \
    --mean_qual 8 \
    -l 1400 --length_limit 1700 \
    -a /zfs/omics/projects/bioinformatics/files/nanopore/all_sequences.fasta \
    --thread 10 \
    -o results/fastplong/v2/barcode01_filtered.fastq.gz
```


Results (94s seconds):

```
Trying to detect adapter sequence at read start
Detected: GCCTACCGTGACAAGAAAGTTGTCGGTGTCTTTGTG
Trying to detect adapter sequence at read end
Detected: CACAAAGACACCGACAACTTTCTTGTC
<longer wait time here, likely since its now checking the other sequences> 

Before filtering:
total reads: 17121
total bases: 24089162
Q20 bases: 13250840(55.0075%)
Q30 bases: 4013925(16.6628%)

After filtering:
total reads: 7392
total bases: 10801616
Q20 bases: 6838544(63.3104%)
Q30 bases: 2192504(20.2979%)

Filtering result:
reads passed filter: 7392
reads failed due to low quality: 4092
reads failed due to too many N: 0
reads failed due to too short: 5660
reads failed due to too long: 15
reads with adapter trimmed: 16921
bases trimmed due to adapters: 2182059

JSON report: fastplong.json
HTML report: fastplong.html
```

Before:
@a72b920c-8266-4865-84a9-50690efe5943 runid=b1ae45334215a9c23ceb122ef2b45224cee1eeab read=26381 ch=122 start_time=2022-03-10T20:32:29Z flow_cell_id=AHJ236 protocol_group_id=matteo2 sample_id=mt2 barcode=barcode01 barcode_alias=barcode01
TTGTACTTCGTTCAGTTCGGGCATTGGGTGTTGCTCAGTTC[ATCGCCTACCGTGAC]{AAGAAAGTTGTCGGTGTCTTTGTG}AGAGTTTGAT|start_trimming|CATGGCTCAGGATGAACGCTGGCGGCGTACCTAACACATGCAAGTCGAACGGGTACCTTTGACAGAGATTTCGGTCAATTGATAAGGATACTTAGTGGCGGACGGGTGAGGTAACGCGTGAGCAATCTGCCTTTCAGTGGGGGAATAACAGTCGGAAACGATTGCTAATACCGCATAATGTATCGGGATCGCATGGTTCTGATACCAAAGATTTATCGCTGAAAGATGAGCTCGCGTCTGATTAGCTAGTTGGTAAGGTAATGGCTTGCAAAGCGACGATCAGTAGCCGGACTGAAGGAGTTGAACGGCCACATTGGGACTGAGACACGGCCCAGACTCCTACAGGAGGCAGCAGTGGGAATATTGGGCAATGGGCATAAGCCTGACCCAGCAACGCCGCGTGAAGGAAAAGGCTTTCGGGTTGTAAACTTCTTTTATCAGGGACGAAAAAAATGACGGTACCTGAAGAATAAGCCACGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGTGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGCGTGTAGGCGGGACTGCAAGTCAGATGTGAAATCTATGGGCTCAACCCATAGCGTGCATTTGAAACTGTAGTTCTTGAGTGATGGAGAGGCAAACGGAATTCCGTGTGTAGCGGTGAAATGCGTAGATATACGGAGGAACACCAGTGGCGAAGGCGGTTTGCTGGACATTAACTGACGCTGAGGCGCGAAAGCGTGGGGAGCAAACAGAGTTAGATACCCTGGTAATTTTTGCTGTAAACGATGGATACTAGGTGTGGGGGGACTGACCCCTTCCGTGCCGCAGTTAACACAATAAGTATCCCACCTGGGGAGTACGATCGCAAGGTCGAAACTCAAAGGAATTGACGGGGGCCCGCACAAGCGGTGGGTATGTGGATTAATTCGAAGCAACGCGAAGAACCTTACCAGGACTTGACATCCTATAACGAAGTAGAGATACATTAGGTGCCCTTCGGGGAAAGTAGAACAGGTGGTGCATGGTTGTCGTCAGCTCGTGTCGTGAGATGTTAGGTTAGAATTCTATGAGCTGCTTATATTAGTTGCTACGCAAGAGCACTCTAGCGAGATACCGTTGATAAAACAGGAGGAAGATTGGGGACGACGTCAAATCATCATGCCTCTTATGTCCTGGGCCTCACGTACTACAATGGCGATTAACAGAGGGAAGCAAGACCGCGAGGTGGAGCAAATCCTAAATCGTCTCAGTTCAGATTGCAGGCTGAAACCCGCCTGTATGAAGTCGGAATCGCTAGTAATCGCGGATCCAGCATGCCGCGGTGAATACGTTCGGGCCTTGTACACACCGCCCGTCACACCACGAGAGTCAGGAACACCGAAGTCCGTAGCTTAACCGCAAGGAGCGCGGCCGAAGGTGGGTTTGATAATTGGGGGTGAAGTCGTAAC|end trimming|AAGGTAACCG{CACAAAGACACCGACAACTTTCTT}G

@a72b920c-8266-4865-84a9-50690efe5943 runid=b1ae45334215a9c23ceb122ef2b45224cee1eeab read=26381 ch=122 start_time=2022-03-10T20:32:29Z flow_cell_id=AHJ236 protocol_group_id=matteo2 sample_id=mt2 barcode=barcode01 barcode_alias=barcode01
CATGGCTCAGGATGAACGCTGGCGGCGTACCTAACACATGCAAGTCGAACGGGTACCTTTGACAGAGATTTCGGTCAATTGATAAGGATACTTAGTGGCGGACGGGTGAGGTAACGCGTGAGCAATCTGCCTTTCAGTGGGGGAATAACAGTCGGAAACGATTGCTAATACCGCATAATGTATCGGGATCGCATGGTTCTGATACCAAAGATTTATCGCTGAAAGATGAGCTCGCGTCTGATTAGCTAGTTGGTAAGGTAATGGCTTGCAAAGCGACGATCAGTAGCCGGACTGAAGGAGTTGAACGGCCACATTGGGACTGAGACACGGCCCAGACTCCTACAGGAGGCAGCAGTGGGAATATTGGGCAATGGGCATAAGCCTGACCCAGCAACGCCGCGTGAAGGAAAAGGCTTTCGGGTTGTAAACTTCTTTTATCAGGGACGAAAAAAATGACGGTACCTGAAGAATAAGCCACGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGTGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGCGTGTAGGCGGGACTGCAAGTCAGATGTGAAATCTATGGGCTCAACCCATAGCGTGCATTTGAAACTGTAGTTCTTGAGTGATGGAGAGGCAAACGGAATTCCGTGTGTAGCGGTGAAATGCGTAGATATACGGAGGAACACCAGTGGCGAAGGCGGTTTGCTGGACATTAACTGACGCTGAGGCGCGAAAGCGTGGGGAGCAAACAGAGTTAGATACCCTGGTAATTTTTGCTGTAAACGATGGATACTAGGTGTGGGGGGACTGACCCCTTCCGTGCCGCAGTTAACACAATAAGTATCCCACCTGGGGAGTACGATCGCAAGGTCGAAACTCAAAGGAATTGACGGGGGCCCGCACAAGCGGTGGGTATGTGGATTAATTCGAAGCAACGCGAAGAACCTTACCAGGACTTGACATCCTATAACGAAGTAGAGATACATTAGGTGCCCTTCGGGGAAAGTAGAACAGGTGGTGCATGGTTGTCGTCAGCTCGTGTCGTGAGATGTTAGGTTAGAATTCTATGAGCTGCTTATATTAGTTGCTACGCAAGAGCACTCTAGCGAGATACCGTTGATAAAACAGGAGGAAGATTGGGGACGACGTCAAATCATCATGCCTCTTATGTCCTGGGCCTCACGTACTACAATGGCGATTAACAGAGGGAAGCAAGACCGCGAGGTGGAGCAAATCCTAAATCGTCTCAGTTCAGATTGCAGGCTGAAACCCGCCTGTATGAAGTCGGAATCGCTAGTAATCGCGGATCCAGCATGCCGCGGTGAATACGTTCGGGCCTTGTACACACCGCCCGTCACACCACGAGAGTCAGGAACACCGAAGTCCGTAGCTTAACCGCAAGGAGCGCGGCCGAAGGTGGGTTTGATAATTGGGGGTGAAGTCGTAAC


### Using a shortened adapter file 

The analysis above seems more accurate but runs quite a bit with 356 adapter sequences. Since this contains individual barcodes but also full sequences, I shortened this file to only include individual sequences, since filtlong will remove any part before and after the forward and reverse barcodes (211).

```{bash}
mkdir results/fastplong/v3

srun --mem=20G --cpus-per-task 10 fastplong \
    -i data/barcode01_merged.fastq.gz \
    --mean_qual 8 \
    -l 1400 --length_limit 1700 \
    -a /zfs/omics/projects/bioinformatics/files/nanopore/all_sequences_unique.fasta \
    --thread 10 \
    -o results/fastplong/v3/barcode01_filtered.fastq.gz
```

Before:
@a72b920c-8266-4865-84a9-50690efe5943 runid=b1ae45334215a9c23ceb122ef2b45224cee1eeab read=26381 ch=122 start_time=2022-03-10T20:32:29Z flow_cell_id=AHJ236 protocol_group_id=matteo2 sample_id=mt2 barcode=barcode01 barcode_alias=barcode01
TTGTACTTCGTTCAGTTCGGGCATTGGGTGTTGCTCAGTTC[ATCGCCTACCGTGAC]{AAGAAAGTTGTCGGTGTCTTTGTG}AGAGTTTGAT|start_trimming|CATGGCTCAGGATGAACGCTGGCGGCGTACCTAACACATGCAAGTCGAACGGGTACCTTTGACAGAGATTTCGGTCAATTGATAAGGATACTTAGTGGCGGACGGGTGAGGTAACGCGTGAGCAATCTGCCTTTCAGTGGGGGAATAACAGTCGGAAACGATTGCTAATACCGCATAATGTATCGGGATCGCATGGTTCTGATACCAAAGATTTATCGCTGAAAGATGAGCTCGCGTCTGATTAGCTAGTTGGTAAGGTAATGGCTTGCAAAGCGACGATCAGTAGCCGGACTGAAGGAGTTGAACGGCCACATTGGGACTGAGACACGGCCCAGACTCCTACAGGAGGCAGCAGTGGGAATATTGGGCAATGGGCATAAGCCTGACCCAGCAACGCCGCGTGAAGGAAAAGGCTTTCGGGTTGTAAACTTCTTTTATCAGGGACGAAAAAAATGACGGTACCTGAAGAATAAGCCACGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGTGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGCGTGTAGGCGGGACTGCAAGTCAGATGTGAAATCTATGGGCTCAACCCATAGCGTGCATTTGAAACTGTAGTTCTTGAGTGATGGAGAGGCAAACGGAATTCCGTGTGTAGCGGTGAAATGCGTAGATATACGGAGGAACACCAGTGGCGAAGGCGGTTTGCTGGACATTAACTGACGCTGAGGCGCGAAAGCGTGGGGAGCAAACAGAGTTAGATACCCTGGTAATTTTTGCTGTAAACGATGGATACTAGGTGTGGGGGGACTGACCCCTTCCGTGCCGCAGTTAACACAATAAGTATCCCACCTGGGGAGTACGATCGCAAGGTCGAAACTCAAAGGAATTGACGGGGGCCCGCACAAGCGGTGGGTATGTGGATTAATTCGAAGCAACGCGAAGAACCTTACCAGGACTTGACATCCTATAACGAAGTAGAGATACATTAGGTGCCCTTCGGGGAAAGTAGAACAGGTGGTGCATGGTTGTCGTCAGCTCGTGTCGTGAGATGTTAGGTTAGAATTCTATGAGCTGCTTATATTAGTTGCTACGCAAGAGCACTCTAGCGAGATACCGTTGATAAAACAGGAGGAAGATTGGGGACGACGTCAAATCATCATGCCTCTTATGTCCTGGGCCTCACGTACTACAATGGCGATTAACAGAGGGAAGCAAGACCGCGAGGTGGAGCAAATCCTAAATCGTCTCAGTTCAGATTGCAGGCTGAAACCCGCCTGTATGAAGTCGGAATCGCTAGTAATCGCGGATCCAGCATGCCGCGGTGAATACGTTCGGGCCTTGTACACACCGCCCGTCACACCACGAGAGTCAGGAACACCGAAGTCCGTAGCTTAACCGCAAGGAGCGCGGCCGAAGGTGGGTTTGATAATTGGGGGTGAAGTCGTAAC|end trimming|AAGGTAACCG{CACAAAGACACCGACAACTTTCTT}G

After filtlong:
@a72b920c-8266-4865-84a9-50690efe5943 runid=b1ae45334215a9c23ceb122ef2b45224cee1eeab read=26381 ch=122 start_time=2022-03-10T20:32:29Z flow_cell_id=AHJ236 protocol_group_id=matteo2 sample_id=mt2 barcode=barcode01 barcode_alias=barcode01
CATGGCTCAGGATGAACGCTGGCGGCGTACCTAACACATGCAAGTCGAACGGGTACCTTTGACAGAGATTTCGGTCAATTGATAAGGATACTTAGTGGCGGACGGGTGAGGTAACGCGTGAGCAATCTGCCTTTCAGTGGGGGAATAACAGTCGGAAACGATTGCTAATACCGCATAATGTATCGGGATCGCATGGTTCTGATACCAAAGATTTATCGCTGAAAGATGAGCTCGCGTCTGATTAGCTAGTTGGTAAGGTAATGGCTTGCAAAGCGACGATCAGTAGCCGGACTGAAGGAGTTGAACGGCCACATTGGGACTGAGACACGGCCCAGACTCCTACAGGAGGCAGCAGTGGGAATATTGGGCAATGGGCATAAGCCTGACCCAGCAACGCCGCGTGAAGGAAAAGGCTTTCGGGTTGTAAACTTCTTTTATCAGGGACGAAAAAAATGACGGTACCTGAAGAATAAGCCACGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGTGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGCGTGTAGGCGGGACTGCAAGTCAGATGTGAAATCTATGGGCTCAACCCATAGCGTGCATTTGAAACTGTAGTTCTTGAGTGATGGAGAGGCAAACGGAATTCCGTGTGTAGCGGTGAAATGCGTAGATATACGGAGGAACACCAGTGGCGAAGGCGGTTTGCTGGACATTAACTGACGCTGAGGCGCGAAAGCGTGGGGAGCAAACAGAGTTAGATACCCTGGTAATTTTTGCTGTAAACGATGGATACTAGGTGTGGGGGGACTGACCCCTTCCGTGCCGCAGTTAACACAATAAGTATCCCACCTGGGGAGTACGATCGCAAGGTCGAAACTCAAAGGAATTGACGGGGGCCCGCACAAGCGGTGGGTATGTGGATTAATTCGAAGCAACGCGAAGAACCTTACCAGGACTTGACATCCTATAACGAAGTAGAGATACATTAGGTGCCCTTCGGGGAAAGTAGAACAGGTGGTGCATGGTTGTCGTCAGCTCGTGTCGTGAGATGTTAGGTTAGAATTCTATGAGCTGCTTATATTAGTTGCTACGCAAGAGCACTCTAGCGAGATACCGTTGATAAAACAGGAGGAAGATTGGGGACGACGTCAAATCATCATGCCTCTTATGTCCTGGGCCTCACGTACTACAATGGCGATTAACAGAGGGAAGCAAGACCGCGAGGTGGAGCAAATCCTAAATCGTCTCAGTTCAGATTGCAGGCTGAAACCCGCCTGTATGAAGTCGGAATCGCTAGTAATCGCGGATCCAGCATGCCGCGGTGAATACGTTCGGGCCTTGTACACACCGCCCGTCACACCACGAGAGTCAGGAACACCGAAGTCCGTAGCTTAACCGCAAGGAGCGCGGCCGAAGGTGGGTTTGATAATTGGGGGTGAAGTCGTAAC


Results (56 seconds):

```
Trying to detect adapter sequence at read start
Detected: GCCTACCGTGACAAGAAAGTTGTCGGTGTCTTTGTG
Trying to detect adapter sequence at read end
Detected: CACAAAGACACCGACAACTTTCTTGTC

Before filtering:
total reads: 17121
total bases: 24089162
Q20 bases: 13250840(55.0075%)
Q30 bases: 4013925(16.6628%)

After filtering:
total reads: 7393
total bases: 10803314
Q20 bases: 6839277(63.3072%)
Q30 bases: 2192695(20.2965%)

Filtering result:
reads passed filter: 7393
reads failed due to low quality: 4090
reads failed due to too many N: 0
reads failed due to too short: 5661
reads failed due to too long: 15
reads with adapter trimmed: 16,919
bases trimmed due to adapters: 2,180,983
```

| Metric                     | Default (v1) | With adapter FASTA (v2) | With shorter adapter fasta (v3) |
| -------------------------- | ------------ | ----------------------- | ------------------------------- |
| Reads passed filter        | 8441         | 7392                    | 7393                            |
| Reads failed short         | 4569         | 5660                    | 5661                            |
| Reads with adapter trimmed | 16548        | 16921                   | 16919                           |
| Bases trimmed              | 1,808,399    | 2,182,059               | 2,180,983                       |


## Compare old setup with fastplong 

### Porechop

```{bash}
conda activate porechop_0.2.4

mkdir -p results/old/porechop/

porechop --input data/barcode01_merged.fastq.gz \
    --output results/old/porechop/barcode01.fastq.gz \
    --threads 2 \
    --discard_middle

conda deactivate
```


| Metric                                     | Filtlong  | Porechop                        | Notes                                                                  |
| ------------------------------------------ | --------- | ------------------------------- | ---------------------------------------------------------------------- |
| Total reads                                | 17,121    | 17,121                          | Same dataset                                                           |
| Reads with adapters trimmed (start or end) | 16,919    | Start: 16,530 / End: 11,881     | Filtlong trims more reads overall; Porechop distinguishes start vs end |
| Bases trimmed due to adapters              | 2,180,983 | Start: 1,342,645 / End: 331,934 | Filtlong trims more bases overall                                      |
| Reads discarded due to middle adapters     | N/A       | 38                              | Filtlong does not report middle adapter trimming by default            |


More bp removed with fastplong might be due to `-  --trimming_extension           when an adapter is detected, extend the trimming to make cleaner trimming, default 10 means trimming 10 bases more (int [=10])
` For an exact comparison let's remove this:


```{bash}
mamba activate fastplong_0.4.1

mkdir results/fastplong/v4

srun --mem=20G --cpus-per-task 10 fastplong \
    -i data/barcode01_merged.fastq.gz \
    -Q -L --trimming_extension 0 \
    -a /zfs/omics/projects/bioinformatics/files/nanopore/all_sequences_unique.fasta \
    --thread 10 \
    -o results/fastplong/v4/barcode01_filtered.fastq.gz
```


|Metric                                      | Filtlong  | Porechop                        | Notes                                                                  |
| ------------------------------------------ | --------- | ------------------------------- | ---------------------------------------------------------------------- |
| Total reads                                | 17,121    | 17,121                          | Same dataset                                                           |
| Reads with adapters trimmed (start or end) | 16,919    | Start: 16,530 / End: 11,881     | Filtlong trims more reads overall; Porechop distinguishes start vs end |
| Bases trimmed due to adapters              | 1,893,740 | Start: 1,342,645 / End: 331,934 | Filtlong trims more bases overall                                      |
| Reads discarded due to middle adapters     | N/A       | 38                              | Filtlong does not report middle adapter trimming by default            |

Filtlong consistently trims slightly more reads at start/end than Porechop, even when --trimming_extension is set to 0.

Before:
@a72b920c-8266-4865-84a9-50690efe5943 runid=b1ae45334215a9c23ceb122ef2b45224cee1eeab read=26381 ch=122 start_time=2022-03-10T20:32:29Z flow_cell_id=AHJ236 protocol_group_id=matteo2 sample_id=mt2 barcode=barcode01 barcode_alias=barcode01
TTGTACTTCGTTCAGTTCGGGCATTGGGTGTTGCTCAGTTC[ATCGCCTACCGTGAC]{AAGAAAGTTGTCGGTGTCTTTGTG}AG|start_trimming|AGTTTGATCATGGCTCAGGATGAACGCTGGCGGCGTACCTAACACATGCAAGTCGAACGGGTACCTTTGACAGAGATTTCGGTCAATTGATAAGGATACTTAGTGGCGGACGGGTGAGGTAACGCGTGAGCAATCTGCCTTTCAGTGGGGGAATAACAGTCGGAAACGATTGCTAATACCGCATAATGTATCGGGATCGCATGGTTCTGATACCAAAGATTTATCGCTGAAAGATGAGCTCGCGTCTGATTAGCTAGTTGGTAAGGTAATGGCTTGCAAAGCGACGATCAGTAGCCGGACTGAAGGAGTTGAACGGCCACATTGGGACTGAGACACGGCCCAGACTCCTACAGGAGGCAGCAGTGGGAATATTGGGCAATGGGCATAAGCCTGACCCAGCAACGCCGCGTGAAGGAAAAGGCTTTCGGGTTGTAAACTTCTTTTATCAGGGACGAAAAAAATGACGGTACCTGAAGAATAAGCCACGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGTGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGCGTGTAGGCGGGACTGCAAGTCAGATGTGAAATCTATGGGCTCAACCCATAGCGTGCATTTGAAACTGTAGTTCTTGAGTGATGGAGAGGCAAACGGAATTCCGTGTGTAGCGGTGAAATGCGTAGATATACGGAGGAACACCAGTGGCGAAGGCGGTTTGCTGGACATTAACTGACGCTGAGGCGCGAAAGCGTGGGGAGCAAACAGAGTTAGATACCCTGGTAATTTTTGCTGTAAACGATGGATACTAGGTGTGGGGGGACTGACCCCTTCCGTGCCGCAGTTAACACAATAAGTATCCCACCTGGGGAGTACGATCGCAAGGTCGAAACTCAAAGGAATTGACGGGGGCCCGCACAAGCGGTGGGTATGTGGATTAATTCGAAGCAACGCGAAGAACCTTACCAGGACTTGACATCCTATAACGAAGTAGAGATACATTAGGTGCCCTTCGGGGAAAGTAGAACAGGTGGTGCATGGTTGTCGTCAGCTCGTGTCGTGAGATGTTAGGTTAGAATTCTATGAGCTGCTTATATTAGTTGCTACGCAAGAGCACTCTAGCGAGATACCGTTGATAAAACAGGAGGAAGATTGGGGACGACGTCAAATCATCATGCCTCTTATGTCCTGGGCCTCACGTACTACAATGGCGATTAACAGAGGGAAGCAAGACCGCGAGGTGGAGCAAATCCTAAATCGTCTCAGTTCAGATTGCAGGCTGAAACCCGCCTGTATGAAGTCGGAATCGCTAGTAATCGCGGATCCAGCATGCCGCGGTGAATACGTTCGGGCCTTGTACACACCGCCCGTCACACCACGAGAGTCAGGAACACCGAAGTCCGTAGCTTAACCGCAAGGAGCGCGGCCGAAGGTGGGTTTGATAATTGGGGGTGAAGTCGTAAC|end trimming|AAGGTAACCG{CACAAAGACACCGACAACTTTCTT}G


After porechop:
@a72b920c-8266-4865-84a9-50690efe5943 runid=b1ae45334215a9c23ceb122ef2b45224cee1eeab read=26381 ch=122 start_time=2022-03-10T20:32:29Z flow_cell_id=AHJ236 protocol_group_id=matteo2 sample_id=mt2 barcode=barcode01 barcode_alias=barcode01
AGTTTGATCATGGCTCAGGATGAACGCTGGCGGCGTACCTAACACATGCAAGTCGAACGGGTACCTTTGACAGAGATTTCGGTCAATTGATAAGGATACTTAGTGGCGGACGGGTGAGGTAACGCGTGAGCAATCTGCCTTTCAGTGGGGGAATAACAGTCGGAAACGATTGCTAATACCGCATAATGTATCGGGATCGCATGGTTCTGATACCAAAGATTTATCGCTGAAAGATGAGCTCGCGTCTGATTAGCTAGTTGGTAAGGTAATGGCTTGCAAAGCGACGATCAGTAGCCGGACTGAAGGAGTTGAACGGCCACATTGGGACTGAGACACGGCCCAGACTCCTACAGGAGGCAGCAGTGGGAATATTGGGCAATGGGCATAAGCCTGACCCAGCAACGCCGCGTGAAGGAAAAGGCTTTCGGGTTGTAAACTTCTTTTATCAGGGACGAAAAAAATGACGGTACCTGAAGAATAAGCCACGGCTAACTACGTGCCAGCAGCCGCGGTAATACGTAGGTGGCAAGCGTTATCCGGATTTACTGGGTGTAAAGGGCGTGTAGGCGGGACTGCAAGTCAGATGTGAAATCTATGGGCTCAACCCATAGCGTGCATTTGAAACTGTAGTTCTTGAGTGATGGAGAGGCAAACGGAATTCCGTGTGTAGCGGTGAAATGCGTAGATATACGGAGGAACACCAGTGGCGAAGGCGGTTTGCTGGACATTAACTGACGCTGAGGCGCGAAAGCGTGGGGAGCAAACAGAGTTAGATACCCTGGTAATTTTTGCTGTAAACGATGGATACTAGGTGTGGGGGGACTGACCCCTTCCGTGCCGCAGTTAACACAATAAGTATCCCACCTGGGGAGTACGATCGCAAGGTCGAAACTCAAAGGAATTGACGGGGGCCCGCACAAGCGGTGGGTATGTGGATTAATTCGAAGCAACGCGAAGAACCTTACCAGGACTTGACATCCTATAACGAAGTAGAGATACATTAGGTGCCCTTCGGGGAAAGTAGAACAGGTGGTGCATGGTTGTCGTCAGCTCGTGTCGTGAGATGTTAGGTTAGAATTCTATGAGCTGCTTATATTAGTTGCTACGCAAGAGCACTCTAGCGAGATACCGTTGATAAAACAGGAGGAAGATTGGGGACGACGTCAAATCATCATGCCTCTTATGTCCTGGGCCTCACGTACTACAATGGCGATTAACAGAGGGAAGCAAGACCGCGAGGTGGAGCAAATCCTAAATCGTCTCAGTTCAGATTGCAGGCTGAAACCCGCCTGTATGAAGTCGGAATCGCTAGTAATCGCGGATCCAGCATGCCGCGGTGAATACGTTCGGGCCTTGTACACACCGCCCGTCACACCACGAGAGTCAGGAACACCGAAGTCCGTAGCTTAACCGCAAGGAGCGCGGCCGAAGGTGGGTTTGATAATTGGGGGTGAAGTCGTAACAAGGTAAC

### Summary

- Default Filtlong behavior
    - fastplong detects the correct barcodes at the start and end of reads without providing an adapters file.
    - Trimming effectively removes any sequence before or after the barcode.
- Providing adapter sequences
    - Slightly increases the number of bases and reads trimmed.
    - Can capture partial or unusual adapter sequences that default detection might miss.
    - Runtime is longer due to the larger adapter library and additional sequence comparisons.
- Comparison with Porechop
    - Both tools trim a similar number of reads and bases.
    - Filtlong appears to remove slightly more sequence. Filtlong removes everything before the barcode at the start and trims slightly more at the end (adapter + extra bases possibly due to mismatch allowance and `--trimming_extension 10`).
    - Porechop uses alignment scoring to handle errors, but exact sequence searching shows why raw reads rarely contain perfect adapter sequences.
- Practical considerations
    - Porechop is no longer maintained.
    - Subsequent workflows often require chopper for additional quality trimming.
    - fastplong provides a alternative



## Organize test files


```{bash}
cd /home/ndombro/personal/data_analysis/data/irathmann

# Path to your base folder
base_folder="/scratch/transfer_nina/data_Nanopore_Isabel"

# Loop through each barcode folder
for folder_name in "$base_folder"/barcode*; do
    # Get the folder name (barcode01, barcode02, etc.)
    barcode_name=$(basename "$folder_name")

    # Concatenate all .fastq.gz files in that folder into one in the current directory
    echo "Processing: $barcode_name in $folder_name"
    
    #ll "$folder_name"/*.fastq.gz
    cat "$folder_name"/*.fastq.gz > "${barcode_name}.fastq.gz"
    
    echo "Created ${barcode_name}.fastq.gz"
done
```